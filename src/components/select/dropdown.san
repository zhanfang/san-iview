<template>
    <div 
        class="{{classes}}"
        style="{{styles}}">
        <slot></slot>
    </div>
</template>

<script>
import classNames from 'classnames';
import {DataTypes, nextTick} from 'san';
import Popper from 'popper.js';

import {getStyle} from '../../utils/assist';
import {debounce} from '../../utils/throttle.js';

export default {
    dataTypes: {
        placement: DataTypes.string,
        visible: DataTypes.bool,
        overflow: DataTypes.bool,
        width: DataTypes.oneOfType([DataTypes.number, DataTypes.string])
    },
    initData() {
        return {
            placement: 'bottom-start',
            width: '',
            visible: false,
            overflow: false
        };
    },
    computed: {
        classes() {
            return classNames([
                'view-select-dropdown',
                {
                    ['view-select-dropdown-hide']: !this.data.get('visible')
                }
            ]);
        },
        styles() {
            let style = {};
            if (this.data.get('width')) {
                style.width = `${this.data.get('width')}px`;
            }

            return style;
        }
    },
    debounce: debounce((fn, data) => {fn(data);}, 300),
    inited() {
        this.on('update-popper', this.update.bind(this));
        this.on('destroy-popper', this.destroy.bind(this));
    },
    detached() {
        if (this.popper) {
            this.popper.destroy();
        }
    },
    update() {
        if (this.popper) {
            nextTick(() => {
                this.popper.update();
            });
        }
        else {
            nextTick(() => {
                let modifiers = {
                    computeStyle: {
                        gpuAcceleration: false
                    }
                };

                if (this.data.get('overflow')) {
                    modifiers = Object.assign({}, modifiers, {
                        preventOverflow: {
                            order: 300,
                            enabled: false
                        },
                        hide: {
                            order: 800,
                            enabled: false
                        }
                    });
                }

                this.popper = new Popper(this.parentComponent.el, this.el, {
                    placement: this.data.get('placement'),
                    boundariesPadding: 0,
                    forceAbsolute: true,
                    boundariesElement: 'body',
                    modifiers: modifiers,
                    onCreate: () => {
                        // this.popper.popper.style.top = '34px';
                        this.resetTransformOrigin(this.popper);
                    }
                });
            });
        }
        if (this.data.get('width') === '' || !this.data.get('width')) {
            this.data.set('width', parseInt(getStyle(this.parentComponent.el, 'width'), 10));
        }
    },
    destroy() {
        if (this.popper) {
            this.resetTransformOrigin(this.popper);
            setTimeout(() => {
                this.popper.destroy();
                this.popper = null;
            }, 300);
        }
    },
    resetTransformOrigin(popper) {
        let placementMap = {top: 'bottom', bottom: 'top'};
        let placement = popper.popper.getAttribute('x-placement').split('-')[0];
        let origin = placementMap[placement];
        popper.popper.style.transformOrigin = `center ${ origin }`;
    }
};
</script>
